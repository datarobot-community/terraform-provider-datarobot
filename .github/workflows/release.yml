# Terraform Provider release workflow.
name: Release

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
  push:
    tags:
      - 'v*'

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # Allow goreleaser to access older tag information.
          fetch-depth: 0
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: 'go.mod'
          cache: true
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
        with:
          version: latest
          args: release --clean
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
      - name: Notify Slack
        if: success()
        env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
            TAG: ${{ github.ref_name }}
            REPO: ${{ github.repository }}
        run: |
          payload=$(jq -n --arg tag "$TAG" --arg repo "$REPO" --arg url "https://github.com/$REPO/releases/tag/$TAG" '{
            text: "*New release*: \($repo) \($tag)",
            blocks: [
              {
          "type":"section",
          "text":{"type":"mrkdwn","text":"*:rocket: New DataRobot Terraform Provider released * <\($url)|\($tag)>"}
              },
              {
          "type":"context",
          "elements":[
            {"type":"mrkdwn","text":"Tag: `\($tag)` • Repository: `\($repo)`"}
          ]
              }
            ]
          }')
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"
  notify-failure:
    needs: goreleaser
    if: needs.goreleaser.result == 'failure'
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack (failure)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TAG: ${{ github.ref_name }}
          REPO: ${{ github.repository }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "Missing SLACK_WEBHOOK_URL."
            exit 0
          fi
          payload=$(jq -n --arg tag "$TAG" --arg repo "$REPO" --arg run "$RUN_URL" '{
            text: "*Release failed*: " + $repo + " " + $tag,
            blocks: [
              {
                "type":"section",
                "text":{"type":"mrkdwn","text":"*:x: Release failed* `" + $repo + "` tag `" + $tag + "`"}
              },
              {
                "type":"section",
                "text":{"type":"mrkdwn","text":"<" + $run + "|View workflow run logs>"}
              },
              {
                "type":"context",
                "elements":[
                  {"type":"mrkdwn","text":"Tag: `" + $tag + "` • Repository: `" + $repo + "`"}
                ]
              }
            ]
          }')
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"
