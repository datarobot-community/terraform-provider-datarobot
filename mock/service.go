// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/service.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	client "github.com/datarobot-community/terraform-provider-datarobot/internal/client"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddDatasetToUseCase mocks base method.
func (m *MockService) AddDatasetToUseCase(ctx context.Context, useCaseID, datasetID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDatasetToUseCase", ctx, useCaseID, datasetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDatasetToUseCase indicates an expected call of AddDatasetToUseCase.
func (mr *MockServiceMockRecorder) AddDatasetToUseCase(ctx, useCaseID, datasetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDatasetToUseCase", reflect.TypeOf((*MockService)(nil).AddDatasetToUseCase), ctx, useCaseID, datasetID)
}

// CreateApplicationFromSource mocks base method.
func (m *MockService) CreateApplicationFromSource(ctx context.Context, req *client.CreateApplicationFromSourceRequest) (*client.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationFromSource", ctx, req)
	ret0, _ := ret[0].(*client.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationFromSource indicates an expected call of CreateApplicationFromSource.
func (mr *MockServiceMockRecorder) CreateApplicationFromSource(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationFromSource", reflect.TypeOf((*MockService)(nil).CreateApplicationFromSource), ctx, req)
}

// CreateApplicationSource mocks base method.
func (m *MockService) CreateApplicationSource(ctx context.Context) (*client.ApplicationSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationSource", ctx)
	ret0, _ := ret[0].(*client.ApplicationSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationSource indicates an expected call of CreateApplicationSource.
func (mr *MockServiceMockRecorder) CreateApplicationSource(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationSource", reflect.TypeOf((*MockService)(nil).CreateApplicationSource), ctx)
}

// CreateApplicationSourceVersion mocks base method.
func (m *MockService) CreateApplicationSourceVersion(ctx context.Context, id string, req *client.CreateApplicationSourceVersionRequest) (*client.ApplicationSourceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationSourceVersion", ctx, id, req)
	ret0, _ := ret[0].(*client.ApplicationSourceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationSourceVersion indicates an expected call of CreateApplicationSourceVersion.
func (mr *MockServiceMockRecorder) CreateApplicationSourceVersion(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationSourceVersion", reflect.TypeOf((*MockService)(nil).CreateApplicationSourceVersion), ctx, id, req)
}

// CreateCredential mocks base method.
func (m *MockService) CreateCredential(ctx context.Context, req *client.CredentialRequest) (*client.CredentialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredential", ctx, req)
	ret0, _ := ret[0].(*client.CredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredential indicates an expected call of CreateCredential.
func (mr *MockServiceMockRecorder) CreateCredential(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredential", reflect.TypeOf((*MockService)(nil).CreateCredential), ctx, req)
}

// CreateCustomModel mocks base method.
func (m *MockService) CreateCustomModel(ctx context.Context, req *client.CreateCustomModelRequest) (*client.CustomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomModel", ctx, req)
	ret0, _ := ret[0].(*client.CustomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomModel indicates an expected call of CreateCustomModel.
func (mr *MockServiceMockRecorder) CreateCustomModel(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomModel", reflect.TypeOf((*MockService)(nil).CreateCustomModel), ctx, req)
}

// CreateCustomModelFromLLMBlueprint mocks base method.
func (m *MockService) CreateCustomModelFromLLMBlueprint(ctx context.Context, req *client.CreateCustomModelFromLLMBlueprintRequest) (*client.CreateCustomModelVersionFromLLMBlueprintResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomModelFromLLMBlueprint", ctx, req)
	ret0, _ := ret[0].(*client.CreateCustomModelVersionFromLLMBlueprintResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomModelFromLLMBlueprint indicates an expected call of CreateCustomModelFromLLMBlueprint.
func (mr *MockServiceMockRecorder) CreateCustomModelFromLLMBlueprint(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomModelFromLLMBlueprint", reflect.TypeOf((*MockService)(nil).CreateCustomModelFromLLMBlueprint), ctx, req)
}

// CreateCustomModelVersionCreateFromLatest mocks base method.
func (m *MockService) CreateCustomModelVersionCreateFromLatest(ctxc context.Context, id string, req *client.CreateCustomModelVersionFromLatestRequest) (*client.CustomModelVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomModelVersionCreateFromLatest", ctxc, id, req)
	ret0, _ := ret[0].(*client.CustomModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomModelVersionCreateFromLatest indicates an expected call of CreateCustomModelVersionCreateFromLatest.
func (mr *MockServiceMockRecorder) CreateCustomModelVersionCreateFromLatest(ctxc, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomModelVersionCreateFromLatest", reflect.TypeOf((*MockService)(nil).CreateCustomModelVersionCreateFromLatest), ctxc, id, req)
}

// CreateCustomModelVersionFromFiles mocks base method.
func (m *MockService) CreateCustomModelVersionFromFiles(ctx context.Context, id string, req *client.CreateCustomModelVersionFromFilesRequest) (*client.CustomModelVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomModelVersionFromFiles", ctx, id, req)
	ret0, _ := ret[0].(*client.CustomModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomModelVersionFromFiles indicates an expected call of CreateCustomModelVersionFromFiles.
func (mr *MockServiceMockRecorder) CreateCustomModelVersionFromFiles(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomModelVersionFromFiles", reflect.TypeOf((*MockService)(nil).CreateCustomModelVersionFromFiles), ctx, id, req)
}

// CreateCustomModelVersionFromGuardConfigurations mocks base method.
func (m *MockService) CreateCustomModelVersionFromGuardConfigurations(ctx context.Context, id string, req *client.CreateCustomModelVersionFromGuardsConfigurationRequest) (*client.CreateCustomModelVersionFromGuardsConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomModelVersionFromGuardConfigurations", ctx, id, req)
	ret0, _ := ret[0].(*client.CreateCustomModelVersionFromGuardsConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomModelVersionFromGuardConfigurations indicates an expected call of CreateCustomModelVersionFromGuardConfigurations.
func (mr *MockServiceMockRecorder) CreateCustomModelVersionFromGuardConfigurations(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomModelVersionFromGuardConfigurations", reflect.TypeOf((*MockService)(nil).CreateCustomModelVersionFromGuardConfigurations), ctx, id, req)
}

// CreateCustomModelVersionFromRemoteRepository mocks base method.
func (m *MockService) CreateCustomModelVersionFromRemoteRepository(ctx context.Context, id string, req *client.CreateCustomModelVersionFromRemoteRepositoryRequest) (*client.CustomModelVersion, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomModelVersionFromRemoteRepository", ctx, id, req)
	ret0, _ := ret[0].(*client.CustomModelVersion)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCustomModelVersionFromRemoteRepository indicates an expected call of CreateCustomModelVersionFromRemoteRepository.
func (mr *MockServiceMockRecorder) CreateCustomModelVersionFromRemoteRepository(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomModelVersionFromRemoteRepository", reflect.TypeOf((*MockService)(nil).CreateCustomModelVersionFromRemoteRepository), ctx, id, req)
}

// CreateDataset mocks base method.
func (m *MockService) CreateDataset(ctx context.Context, req *client.CreateDatasetRequest) (*client.CreateDatasetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataset", ctx, req)
	ret0, _ := ret[0].(*client.CreateDatasetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockServiceMockRecorder) CreateDataset(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockService)(nil).CreateDataset), ctx, req)
}

// CreateDatasetFromFile mocks base method.
func (m *MockService) CreateDatasetFromFile(ctx context.Context, fileName string, content []byte) (*client.CreateDatasetVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetFromFile", ctx, fileName, content)
	ret0, _ := ret[0].(*client.CreateDatasetVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetFromFile indicates an expected call of CreateDatasetFromFile.
func (mr *MockServiceMockRecorder) CreateDatasetFromFile(ctx, fileName, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetFromFile", reflect.TypeOf((*MockService)(nil).CreateDatasetFromFile), ctx, fileName, content)
}

// CreateDatasetFromURL mocks base method.
func (m *MockService) CreateDatasetFromURL(ctx context.Context, req *client.CreateDatasetFromURLRequest) (*client.CreateDatasetVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetFromURL", ctx, req)
	ret0, _ := ret[0].(*client.CreateDatasetVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetFromURL indicates an expected call of CreateDatasetFromURL.
func (mr *MockServiceMockRecorder) CreateDatasetFromURL(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetFromURL", reflect.TypeOf((*MockService)(nil).CreateDatasetFromURL), ctx, req)
}

// CreateDatastore mocks base method.
func (m *MockService) CreateDatastore(ctx context.Context, req *client.CreateDatastoreRequest) (*client.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatastore", ctx, req)
	ret0, _ := ret[0].(*client.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatastore indicates an expected call of CreateDatastore.
func (mr *MockServiceMockRecorder) CreateDatastore(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatastore", reflect.TypeOf((*MockService)(nil).CreateDatastore), ctx, req)
}

// CreateDependencyBuild mocks base method.
func (m *MockService) CreateDependencyBuild(ctx context.Context, id, versionID string) (*client.DependencyBuild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDependencyBuild", ctx, id, versionID)
	ret0, _ := ret[0].(*client.DependencyBuild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDependencyBuild indicates an expected call of CreateDependencyBuild.
func (mr *MockServiceMockRecorder) CreateDependencyBuild(ctx, id, versionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDependencyBuild", reflect.TypeOf((*MockService)(nil).CreateDependencyBuild), ctx, id, versionID)
}

// CreateDeploymentFromModelPackage mocks base method.
func (m *MockService) CreateDeploymentFromModelPackage(ctx context.Context, req *client.CreateDeploymentFromModelPackageRequest) (*client.DeploymentCreateResponse, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentFromModelPackage", ctx, req)
	ret0, _ := ret[0].(*client.DeploymentCreateResponse)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDeploymentFromModelPackage indicates an expected call of CreateDeploymentFromModelPackage.
func (mr *MockServiceMockRecorder) CreateDeploymentFromModelPackage(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentFromModelPackage", reflect.TypeOf((*MockService)(nil).CreateDeploymentFromModelPackage), ctx, req)
}

// CreateLLMBlueprint mocks base method.
func (m *MockService) CreateLLMBlueprint(ctx context.Context, req *client.CreateLLMBlueprintRequest) (*client.LLMBlueprint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLLMBlueprint", ctx, req)
	ret0, _ := ret[0].(*client.LLMBlueprint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLLMBlueprint indicates an expected call of CreateLLMBlueprint.
func (mr *MockServiceMockRecorder) CreateLLMBlueprint(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLLMBlueprint", reflect.TypeOf((*MockService)(nil).CreateLLMBlueprint), ctx, req)
}

// CreatePlayground mocks base method.
func (m *MockService) CreatePlayground(ctx context.Context, req *client.CreatePlaygroundRequest) (*client.CreatePlaygroundResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayground", ctx, req)
	ret0, _ := ret[0].(*client.CreatePlaygroundResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlayground indicates an expected call of CreatePlayground.
func (mr *MockServiceMockRecorder) CreatePlayground(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayground", reflect.TypeOf((*MockService)(nil).CreatePlayground), ctx, req)
}

// CreatePredictionEnvironment mocks base method.
func (m *MockService) CreatePredictionEnvironment(ctx context.Context, req *client.PredictionEnvironmentRequest) (*client.PredictionEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePredictionEnvironment", ctx, req)
	ret0, _ := ret[0].(*client.PredictionEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePredictionEnvironment indicates an expected call of CreatePredictionEnvironment.
func (mr *MockServiceMockRecorder) CreatePredictionEnvironment(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePredictionEnvironment", reflect.TypeOf((*MockService)(nil).CreatePredictionEnvironment), ctx, req)
}

// CreateQAApplication mocks base method.
func (m *MockService) CreateQAApplication(ctx context.Context, req *client.CreateQAApplicationRequest) (*client.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQAApplication", ctx, req)
	ret0, _ := ret[0].(*client.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQAApplication indicates an expected call of CreateQAApplication.
func (mr *MockServiceMockRecorder) CreateQAApplication(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQAApplication", reflect.TypeOf((*MockService)(nil).CreateQAApplication), ctx, req)
}

// CreateRegisteredModelFromCustomModelVersion mocks base method.
func (m *MockService) CreateRegisteredModelFromCustomModelVersion(ctx context.Context, req *client.CreateRegisteredModelFromCustomModelRequest) (*client.RegisteredModelVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegisteredModelFromCustomModelVersion", ctx, req)
	ret0, _ := ret[0].(*client.RegisteredModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegisteredModelFromCustomModelVersion indicates an expected call of CreateRegisteredModelFromCustomModelVersion.
func (mr *MockServiceMockRecorder) CreateRegisteredModelFromCustomModelVersion(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegisteredModelFromCustomModelVersion", reflect.TypeOf((*MockService)(nil).CreateRegisteredModelFromCustomModelVersion), ctx, req)
}

// CreateRegisteredModelFromLeaderboard mocks base method.
func (m *MockService) CreateRegisteredModelFromLeaderboard(ctx context.Context, req *client.CreateRegisteredModelFromLeaderboardRequest) (*client.RegisteredModelVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegisteredModelFromLeaderboard", ctx, req)
	ret0, _ := ret[0].(*client.RegisteredModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegisteredModelFromLeaderboard indicates an expected call of CreateRegisteredModelFromLeaderboard.
func (mr *MockServiceMockRecorder) CreateRegisteredModelFromLeaderboard(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegisteredModelFromLeaderboard", reflect.TypeOf((*MockService)(nil).CreateRegisteredModelFromLeaderboard), ctx, req)
}

// CreateRemoteRepository mocks base method.
func (m *MockService) CreateRemoteRepository(ctx context.Context, req *client.CreateRemoteRepositoryRequest) (*client.RemoteRepositoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemoteRepository", ctx, req)
	ret0, _ := ret[0].(*client.RemoteRepositoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRemoteRepository indicates an expected call of CreateRemoteRepository.
func (mr *MockServiceMockRecorder) CreateRemoteRepository(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemoteRepository", reflect.TypeOf((*MockService)(nil).CreateRemoteRepository), ctx, req)
}

// CreateUseCase mocks base method.
func (m *MockService) CreateUseCase(ctx context.Context, req *client.UseCaseRequest) (*client.CreateUseCaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUseCase", ctx, req)
	ret0, _ := ret[0].(*client.CreateUseCaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUseCase indicates an expected call of CreateUseCase.
func (mr *MockServiceMockRecorder) CreateUseCase(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUseCase", reflect.TypeOf((*MockService)(nil).CreateUseCase), ctx, req)
}

// CreateVectorDatabase mocks base method.
func (m *MockService) CreateVectorDatabase(ctx context.Context, req *client.CreateVectorDatabaseRequest) (*client.VectorDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVectorDatabase", ctx, req)
	ret0, _ := ret[0].(*client.VectorDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVectorDatabase indicates an expected call of CreateVectorDatabase.
func (mr *MockServiceMockRecorder) CreateVectorDatabase(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVectorDatabase", reflect.TypeOf((*MockService)(nil).CreateVectorDatabase), ctx, req)
}

// DeleteApplication mocks base method.
func (m *MockService) DeleteApplication(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockServiceMockRecorder) DeleteApplication(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockService)(nil).DeleteApplication), ctx, id)
}

// DeleteApplicationSource mocks base method.
func (m *MockService) DeleteApplicationSource(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationSource", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplicationSource indicates an expected call of DeleteApplicationSource.
func (mr *MockServiceMockRecorder) DeleteApplicationSource(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationSource", reflect.TypeOf((*MockService)(nil).DeleteApplicationSource), ctx, id)
}

// DeleteCredential mocks base method.
func (m *MockService) DeleteCredential(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredential", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredential indicates an expected call of DeleteCredential.
func (mr *MockServiceMockRecorder) DeleteCredential(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredential", reflect.TypeOf((*MockService)(nil).DeleteCredential), ctx, id)
}

// DeleteCustomModel mocks base method.
func (m *MockService) DeleteCustomModel(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomModel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomModel indicates an expected call of DeleteCustomModel.
func (mr *MockServiceMockRecorder) DeleteCustomModel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomModel", reflect.TypeOf((*MockService)(nil).DeleteCustomModel), ctx, id)
}

// DeleteDataset mocks base method.
func (m *MockService) DeleteDataset(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataset", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockServiceMockRecorder) DeleteDataset(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockService)(nil).DeleteDataset), ctx, id)
}

// DeleteDatastore mocks base method.
func (m *MockService) DeleteDatastore(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatastore", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDatastore indicates an expected call of DeleteDatastore.
func (mr *MockServiceMockRecorder) DeleteDatastore(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatastore", reflect.TypeOf((*MockService)(nil).DeleteDatastore), ctx, id)
}

// DeleteDeployment mocks base method.
func (m *MockService) DeleteDeployment(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployment indicates an expected call of DeleteDeployment.
func (mr *MockServiceMockRecorder) DeleteDeployment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockService)(nil).DeleteDeployment), ctx, id)
}

// DeleteLLMBlueprint mocks base method.
func (m *MockService) DeleteLLMBlueprint(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLLMBlueprint", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLLMBlueprint indicates an expected call of DeleteLLMBlueprint.
func (mr *MockServiceMockRecorder) DeleteLLMBlueprint(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLLMBlueprint", reflect.TypeOf((*MockService)(nil).DeleteLLMBlueprint), ctx, id)
}

// DeletePlayground mocks base method.
func (m *MockService) DeletePlayground(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlayground", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlayground indicates an expected call of DeletePlayground.
func (mr *MockServiceMockRecorder) DeletePlayground(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlayground", reflect.TypeOf((*MockService)(nil).DeletePlayground), ctx, id)
}

// DeletePredictionEnvironment mocks base method.
func (m *MockService) DeletePredictionEnvironment(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePredictionEnvironment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePredictionEnvironment indicates an expected call of DeletePredictionEnvironment.
func (mr *MockServiceMockRecorder) DeletePredictionEnvironment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePredictionEnvironment", reflect.TypeOf((*MockService)(nil).DeletePredictionEnvironment), ctx, id)
}

// DeleteRegisteredModel mocks base method.
func (m *MockService) DeleteRegisteredModel(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegisteredModel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRegisteredModel indicates an expected call of DeleteRegisteredModel.
func (mr *MockServiceMockRecorder) DeleteRegisteredModel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegisteredModel", reflect.TypeOf((*MockService)(nil).DeleteRegisteredModel), ctx, id)
}

// DeleteRemoteRepository mocks base method.
func (m *MockService) DeleteRemoteRepository(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemoteRepository", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRemoteRepository indicates an expected call of DeleteRemoteRepository.
func (mr *MockServiceMockRecorder) DeleteRemoteRepository(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemoteRepository", reflect.TypeOf((*MockService)(nil).DeleteRemoteRepository), ctx, id)
}

// DeleteUseCase mocks base method.
func (m *MockService) DeleteUseCase(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUseCase", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUseCase indicates an expected call of DeleteUseCase.
func (mr *MockServiceMockRecorder) DeleteUseCase(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUseCase", reflect.TypeOf((*MockService)(nil).DeleteUseCase), ctx, id)
}

// DeleteVectorDatabase mocks base method.
func (m *MockService) DeleteVectorDatabase(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVectorDatabase", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVectorDatabase indicates an expected call of DeleteVectorDatabase.
func (mr *MockServiceMockRecorder) DeleteVectorDatabase(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVectorDatabase", reflect.TypeOf((*MockService)(nil).DeleteVectorDatabase), ctx, id)
}

// GetApplication mocks base method.
func (m *MockService) GetApplication(ctx context.Context, id string) (*client.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", ctx, id)
	ret0, _ := ret[0].(*client.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockServiceMockRecorder) GetApplication(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockService)(nil).GetApplication), ctx, id)
}

// GetApplicationSource mocks base method.
func (m *MockService) GetApplicationSource(ctx context.Context, id string) (*client.ApplicationSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationSource", ctx, id)
	ret0, _ := ret[0].(*client.ApplicationSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationSource indicates an expected call of GetApplicationSource.
func (mr *MockServiceMockRecorder) GetApplicationSource(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationSource", reflect.TypeOf((*MockService)(nil).GetApplicationSource), ctx, id)
}

// GetApplicationSourceVersion mocks base method.
func (m *MockService) GetApplicationSourceVersion(ctx context.Context, id, versionId string) (*client.ApplicationSourceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationSourceVersion", ctx, id, versionId)
	ret0, _ := ret[0].(*client.ApplicationSourceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationSourceVersion indicates an expected call of GetApplicationSourceVersion.
func (mr *MockServiceMockRecorder) GetApplicationSourceVersion(ctx, id, versionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationSourceVersion", reflect.TypeOf((*MockService)(nil).GetApplicationSourceVersion), ctx, id, versionId)
}

// GetCredential mocks base method.
func (m *MockService) GetCredential(ctx context.Context, id string) (*client.CredentialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredential", ctx, id)
	ret0, _ := ret[0].(*client.CredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredential indicates an expected call of GetCredential.
func (mr *MockServiceMockRecorder) GetCredential(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredential", reflect.TypeOf((*MockService)(nil).GetCredential), ctx, id)
}

// GetCustomModel mocks base method.
func (m *MockService) GetCustomModel(ctx context.Context, id string) (*client.CustomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomModel", ctx, id)
	ret0, _ := ret[0].(*client.CustomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomModel indicates an expected call of GetCustomModel.
func (mr *MockServiceMockRecorder) GetCustomModel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomModel", reflect.TypeOf((*MockService)(nil).GetCustomModel), ctx, id)
}

// GetDataset mocks base method.
func (m *MockService) GetDataset(ctx context.Context, id string) (*client.Dataset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataset", ctx, id)
	ret0, _ := ret[0].(*client.Dataset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataset indicates an expected call of GetDataset.
func (mr *MockServiceMockRecorder) GetDataset(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataset", reflect.TypeOf((*MockService)(nil).GetDataset), ctx, id)
}

// GetDatastore mocks base method.
func (m *MockService) GetDatastore(ctx context.Context, id string) (*client.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatastore", ctx, id)
	ret0, _ := ret[0].(*client.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatastore indicates an expected call of GetDatastore.
func (mr *MockServiceMockRecorder) GetDatastore(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatastore", reflect.TypeOf((*MockService)(nil).GetDatastore), ctx, id)
}

// GetDependencyBuild mocks base method.
func (m *MockService) GetDependencyBuild(ctx context.Context, id, versionID string) (*client.DependencyBuild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependencyBuild", ctx, id, versionID)
	ret0, _ := ret[0].(*client.DependencyBuild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDependencyBuild indicates an expected call of GetDependencyBuild.
func (mr *MockServiceMockRecorder) GetDependencyBuild(ctx, id, versionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependencyBuild", reflect.TypeOf((*MockService)(nil).GetDependencyBuild), ctx, id, versionID)
}

// GetDeployment mocks base method.
func (m *MockService) GetDeployment(ctx context.Context, id string) (*client.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", ctx, id)
	ret0, _ := ret[0].(*client.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockServiceMockRecorder) GetDeployment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockService)(nil).GetDeployment), ctx, id)
}

// GetDeploymentChallengerReplaySettings mocks base method.
func (m *MockService) GetDeploymentChallengerReplaySettings(ctx context.Context, id string) (*client.DeploymentChallengerReplaySettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentChallengerReplaySettings", ctx, id)
	ret0, _ := ret[0].(*client.DeploymentChallengerReplaySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentChallengerReplaySettings indicates an expected call of GetDeploymentChallengerReplaySettings.
func (mr *MockServiceMockRecorder) GetDeploymentChallengerReplaySettings(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentChallengerReplaySettings", reflect.TypeOf((*MockService)(nil).GetDeploymentChallengerReplaySettings), ctx, id)
}

// GetDeploymentHealthSettings mocks base method.
func (m *MockService) GetDeploymentHealthSettings(ctx context.Context, id string) (*client.DeploymentHealthSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentHealthSettings", ctx, id)
	ret0, _ := ret[0].(*client.DeploymentHealthSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentHealthSettings indicates an expected call of GetDeploymentHealthSettings.
func (mr *MockServiceMockRecorder) GetDeploymentHealthSettings(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentHealthSettings", reflect.TypeOf((*MockService)(nil).GetDeploymentHealthSettings), ctx, id)
}

// GetDeploymentSettings mocks base method.
func (m *MockService) GetDeploymentSettings(ctx context.Context, id string) (*client.DeploymentSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentSettings", ctx, id)
	ret0, _ := ret[0].(*client.DeploymentSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentSettings indicates an expected call of GetDeploymentSettings.
func (mr *MockServiceMockRecorder) GetDeploymentSettings(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentSettings", reflect.TypeOf((*MockService)(nil).GetDeploymentSettings), ctx, id)
}

// GetGuardConfigurationsForCustomModelVersion mocks base method.
func (m *MockService) GetGuardConfigurationsForCustomModelVersion(ctx context.Context, id string) (*client.GuardConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuardConfigurationsForCustomModelVersion", ctx, id)
	ret0, _ := ret[0].(*client.GuardConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuardConfigurationsForCustomModelVersion indicates an expected call of GetGuardConfigurationsForCustomModelVersion.
func (mr *MockServiceMockRecorder) GetGuardConfigurationsForCustomModelVersion(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuardConfigurationsForCustomModelVersion", reflect.TypeOf((*MockService)(nil).GetGuardConfigurationsForCustomModelVersion), ctx, id)
}

// GetLLMBlueprint mocks base method.
func (m *MockService) GetLLMBlueprint(ctx context.Context, id string) (*client.LLMBlueprint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLLMBlueprint", ctx, id)
	ret0, _ := ret[0].(*client.LLMBlueprint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLLMBlueprint indicates an expected call of GetLLMBlueprint.
func (mr *MockServiceMockRecorder) GetLLMBlueprint(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLLMBlueprint", reflect.TypeOf((*MockService)(nil).GetLLMBlueprint), ctx, id)
}

// GetLatestRegisteredModelVersion mocks base method.
func (m *MockService) GetLatestRegisteredModelVersion(ctx context.Context, id string) (*client.RegisteredModelVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRegisteredModelVersion", ctx, id)
	ret0, _ := ret[0].(*client.RegisteredModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRegisteredModelVersion indicates an expected call of GetLatestRegisteredModelVersion.
func (mr *MockServiceMockRecorder) GetLatestRegisteredModelVersion(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRegisteredModelVersion", reflect.TypeOf((*MockService)(nil).GetLatestRegisteredModelVersion), ctx, id)
}

// GetOverallModerationConfigurationForCustomModelVersion mocks base method.
func (m *MockService) GetOverallModerationConfigurationForCustomModelVersion(ctx context.Context, id string) (*client.OverallModerationConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverallModerationConfigurationForCustomModelVersion", ctx, id)
	ret0, _ := ret[0].(*client.OverallModerationConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverallModerationConfigurationForCustomModelVersion indicates an expected call of GetOverallModerationConfigurationForCustomModelVersion.
func (mr *MockServiceMockRecorder) GetOverallModerationConfigurationForCustomModelVersion(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverallModerationConfigurationForCustomModelVersion", reflect.TypeOf((*MockService)(nil).GetOverallModerationConfigurationForCustomModelVersion), ctx, id)
}

// GetPlayground mocks base method.
func (m *MockService) GetPlayground(ctx context.Context, id string) (*client.PlaygroundResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayground", ctx, id)
	ret0, _ := ret[0].(*client.PlaygroundResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayground indicates an expected call of GetPlayground.
func (mr *MockServiceMockRecorder) GetPlayground(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayground", reflect.TypeOf((*MockService)(nil).GetPlayground), ctx, id)
}

// GetPredictionEnvironment mocks base method.
func (m *MockService) GetPredictionEnvironment(ctx context.Context, id string) (*client.PredictionEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPredictionEnvironment", ctx, id)
	ret0, _ := ret[0].(*client.PredictionEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPredictionEnvironment indicates an expected call of GetPredictionEnvironment.
func (mr *MockServiceMockRecorder) GetPredictionEnvironment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPredictionEnvironment", reflect.TypeOf((*MockService)(nil).GetPredictionEnvironment), ctx, id)
}

// GetRegisteredModel mocks base method.
func (m *MockService) GetRegisteredModel(ctx context.Context, id string) (*client.RegisteredModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredModel", ctx, id)
	ret0, _ := ret[0].(*client.RegisteredModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredModel indicates an expected call of GetRegisteredModel.
func (mr *MockServiceMockRecorder) GetRegisteredModel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredModel", reflect.TypeOf((*MockService)(nil).GetRegisteredModel), ctx, id)
}

// GetRegisteredModelVersion mocks base method.
func (m *MockService) GetRegisteredModelVersion(ctx context.Context, registeredModelId, versionId string) (*client.RegisteredModelVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredModelVersion", ctx, registeredModelId, versionId)
	ret0, _ := ret[0].(*client.RegisteredModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredModelVersion indicates an expected call of GetRegisteredModelVersion.
func (mr *MockServiceMockRecorder) GetRegisteredModelVersion(ctx, registeredModelId, versionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredModelVersion", reflect.TypeOf((*MockService)(nil).GetRegisteredModelVersion), ctx, registeredModelId, versionId)
}

// GetRemoteRepository mocks base method.
func (m *MockService) GetRemoteRepository(ctx context.Context, id string) (*client.RemoteRepositoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteRepository", ctx, id)
	ret0, _ := ret[0].(*client.RemoteRepositoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteRepository indicates an expected call of GetRemoteRepository.
func (mr *MockServiceMockRecorder) GetRemoteRepository(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteRepository", reflect.TypeOf((*MockService)(nil).GetRemoteRepository), ctx, id)
}

// GetTaskStatus mocks base method.
func (m *MockService) GetTaskStatus(ctx context.Context, id string) (*client.TaskStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatus", ctx, id)
	ret0, _ := ret[0].(*client.TaskStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskStatus indicates an expected call of GetTaskStatus.
func (mr *MockServiceMockRecorder) GetTaskStatus(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatus", reflect.TypeOf((*MockService)(nil).GetTaskStatus), ctx, id)
}

// GetUseCase mocks base method.
func (m *MockService) GetUseCase(ctx context.Context, id string) (*client.UseCaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUseCase", ctx, id)
	ret0, _ := ret[0].(*client.UseCaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUseCase indicates an expected call of GetUseCase.
func (mr *MockServiceMockRecorder) GetUseCase(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUseCase", reflect.TypeOf((*MockService)(nil).GetUseCase), ctx, id)
}

// GetVectorDatabase mocks base method.
func (m *MockService) GetVectorDatabase(ctx context.Context, id string) (*client.VectorDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVectorDatabase", ctx, id)
	ret0, _ := ret[0].(*client.VectorDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVectorDatabase indicates an expected call of GetVectorDatabase.
func (mr *MockServiceMockRecorder) GetVectorDatabase(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVectorDatabase", reflect.TypeOf((*MockService)(nil).GetVectorDatabase), ctx, id)
}

// IsApplicationReady mocks base method.
func (m *MockService) IsApplicationReady(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApplicationReady", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsApplicationReady indicates an expected call of IsApplicationReady.
func (mr *MockServiceMockRecorder) IsApplicationReady(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApplicationReady", reflect.TypeOf((*MockService)(nil).IsApplicationReady), ctx, id)
}

// IsCustomModelReady mocks base method.
func (m *MockService) IsCustomModelReady(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCustomModelReady", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCustomModelReady indicates an expected call of IsCustomModelReady.
func (mr *MockServiceMockRecorder) IsCustomModelReady(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCustomModelReady", reflect.TypeOf((*MockService)(nil).IsCustomModelReady), ctx, id)
}

// IsRegisteredModelVersionReady mocks base method.
func (m *MockService) IsRegisteredModelVersionReady(ctx context.Context, registeredModelId, versionId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRegisteredModelVersionReady", ctx, registeredModelId, versionId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRegisteredModelVersionReady indicates an expected call of IsRegisteredModelVersionReady.
func (mr *MockServiceMockRecorder) IsRegisteredModelVersionReady(ctx, registeredModelId, versionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRegisteredModelVersionReady", reflect.TypeOf((*MockService)(nil).IsRegisteredModelVersionReady), ctx, registeredModelId, versionId)
}

// IsVectorDatabaseReady mocks base method.
func (m *MockService) IsVectorDatabaseReady(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVectorDatabaseReady", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsVectorDatabaseReady indicates an expected call of IsVectorDatabaseReady.
func (mr *MockServiceMockRecorder) IsVectorDatabaseReady(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVectorDatabaseReady", reflect.TypeOf((*MockService)(nil).IsVectorDatabaseReady), ctx, id)
}

// ListApplicationSourceVersions mocks base method.
func (m *MockService) ListApplicationSourceVersions(ctx context.Context, id string) (*client.ListApplicationSourceVersionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationSourceVersions", ctx, id)
	ret0, _ := ret[0].(*client.ListApplicationSourceVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationSourceVersions indicates an expected call of ListApplicationSourceVersions.
func (mr *MockServiceMockRecorder) ListApplicationSourceVersions(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationSourceVersions", reflect.TypeOf((*MockService)(nil).ListApplicationSourceVersions), ctx, id)
}

// ListExecutionEnvironments mocks base method.
func (m *MockService) ListExecutionEnvironments(ctx context.Context) (*client.ListExecutionEnvironmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutionEnvironments", ctx)
	ret0, _ := ret[0].(*client.ListExecutionEnvironmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutionEnvironments indicates an expected call of ListExecutionEnvironments.
func (mr *MockServiceMockRecorder) ListExecutionEnvironments(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionEnvironments", reflect.TypeOf((*MockService)(nil).ListExecutionEnvironments), ctx)
}

// ListGuardTemplates mocks base method.
func (m *MockService) ListGuardTemplates(ctx context.Context) (*client.ListGuardTemplatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGuardTemplates", ctx)
	ret0, _ := ret[0].(*client.ListGuardTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGuardTemplates indicates an expected call of ListGuardTemplates.
func (mr *MockServiceMockRecorder) ListGuardTemplates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGuardTemplates", reflect.TypeOf((*MockService)(nil).ListGuardTemplates), ctx)
}

// ListLLMs mocks base method.
func (m *MockService) ListLLMs(ctx context.Context) (*client.ListLLMsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLLMs", ctx)
	ret0, _ := ret[0].(*client.ListLLMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLLMs indicates an expected call of ListLLMs.
func (mr *MockServiceMockRecorder) ListLLMs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLLMs", reflect.TypeOf((*MockService)(nil).ListLLMs), ctx)
}

// ListRegisteredModelVersions mocks base method.
func (m *MockService) ListRegisteredModelVersions(ctx context.Context, id string) (*client.ListRegisteredModelVersionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegisteredModelVersions", ctx, id)
	ret0, _ := ret[0].(*client.ListRegisteredModelVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegisteredModelVersions indicates an expected call of ListRegisteredModelVersions.
func (mr *MockServiceMockRecorder) ListRegisteredModelVersions(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredModelVersions", reflect.TypeOf((*MockService)(nil).ListRegisteredModelVersions), ctx, id)
}

// ListRegisteredModels mocks base method.
func (m *MockService) ListRegisteredModels(ctx context.Context) (*client.ListRegisteredModelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegisteredModels", ctx)
	ret0, _ := ret[0].(*client.ListRegisteredModelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegisteredModels indicates an expected call of ListRegisteredModels.
func (mr *MockServiceMockRecorder) ListRegisteredModels(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegisteredModels", reflect.TypeOf((*MockService)(nil).ListRegisteredModels), ctx)
}

// RemoveDatasetFromUseCase mocks base method.
func (m *MockService) RemoveDatasetFromUseCase(ctx context.Context, useCaseID, datasetID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDatasetFromUseCase", ctx, useCaseID, datasetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDatasetFromUseCase indicates an expected call of RemoveDatasetFromUseCase.
func (mr *MockServiceMockRecorder) RemoveDatasetFromUseCase(ctx, useCaseID, datasetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDatasetFromUseCase", reflect.TypeOf((*MockService)(nil).RemoveDatasetFromUseCase), ctx, useCaseID, datasetID)
}

// TestDataStoreConnection mocks base method.
func (m *MockService) TestDataStoreConnection(ctx context.Context, id string, req *client.TestDatastoreConnectionRequest) (*client.TestDatastoreConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestDataStoreConnection", ctx, id, req)
	ret0, _ := ret[0].(*client.TestDatastoreConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestDataStoreConnection indicates an expected call of TestDataStoreConnection.
func (mr *MockServiceMockRecorder) TestDataStoreConnection(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestDataStoreConnection", reflect.TypeOf((*MockService)(nil).TestDataStoreConnection), ctx, id, req)
}

// UpdateApplication mocks base method.
func (m *MockService) UpdateApplication(ctx context.Context, id string, req *client.UpdateApplicationRequest) (*client.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", ctx, id, req)
	ret0, _ := ret[0].(*client.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockServiceMockRecorder) UpdateApplication(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockService)(nil).UpdateApplication), ctx, id, req)
}

// UpdateApplicationSource mocks base method.
func (m *MockService) UpdateApplicationSource(ctx context.Context, id string, req *client.UpdateApplicationSourceRequest) (*client.ApplicationSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationSource", ctx, id, req)
	ret0, _ := ret[0].(*client.ApplicationSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationSource indicates an expected call of UpdateApplicationSource.
func (mr *MockServiceMockRecorder) UpdateApplicationSource(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationSource", reflect.TypeOf((*MockService)(nil).UpdateApplicationSource), ctx, id, req)
}

// UpdateApplicationSourceVersion mocks base method.
func (m *MockService) UpdateApplicationSourceVersion(ctx context.Context, id, versionId string, req *client.UpdateApplicationSourceVersionRequest) (*client.ApplicationSourceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationSourceVersion", ctx, id, versionId, req)
	ret0, _ := ret[0].(*client.ApplicationSourceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationSourceVersion indicates an expected call of UpdateApplicationSourceVersion.
func (mr *MockServiceMockRecorder) UpdateApplicationSourceVersion(ctx, id, versionId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationSourceVersion", reflect.TypeOf((*MockService)(nil).UpdateApplicationSourceVersion), ctx, id, versionId, req)
}

// UpdateApplicationSourceVersionFiles mocks base method.
func (m *MockService) UpdateApplicationSourceVersionFiles(ctx context.Context, id, versionId string, files []client.FileInfo) (*client.ApplicationSourceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationSourceVersionFiles", ctx, id, versionId, files)
	ret0, _ := ret[0].(*client.ApplicationSourceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationSourceVersionFiles indicates an expected call of UpdateApplicationSourceVersionFiles.
func (mr *MockServiceMockRecorder) UpdateApplicationSourceVersionFiles(ctx, id, versionId, files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationSourceVersionFiles", reflect.TypeOf((*MockService)(nil).UpdateApplicationSourceVersionFiles), ctx, id, versionId, files)
}

// UpdateCredential mocks base method.
func (m *MockService) UpdateCredential(ctx context.Context, id string, req *client.CredentialRequest) (*client.CredentialResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredential", ctx, id, req)
	ret0, _ := ret[0].(*client.CredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCredential indicates an expected call of UpdateCredential.
func (mr *MockServiceMockRecorder) UpdateCredential(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredential", reflect.TypeOf((*MockService)(nil).UpdateCredential), ctx, id, req)
}

// UpdateCustomModel mocks base method.
func (m *MockService) UpdateCustomModel(ctx context.Context, id string, req *client.UpdateCustomModelRequest) (*client.CustomModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomModel", ctx, id, req)
	ret0, _ := ret[0].(*client.CustomModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomModel indicates an expected call of UpdateCustomModel.
func (mr *MockServiceMockRecorder) UpdateCustomModel(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomModel", reflect.TypeOf((*MockService)(nil).UpdateCustomModel), ctx, id, req)
}

// UpdateDataset mocks base method.
func (m *MockService) UpdateDataset(ctx context.Context, id string, req *client.UpdateDatasetRequest) (*client.Dataset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataset", ctx, id, req)
	ret0, _ := ret[0].(*client.Dataset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataset indicates an expected call of UpdateDataset.
func (mr *MockServiceMockRecorder) UpdateDataset(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataset", reflect.TypeOf((*MockService)(nil).UpdateDataset), ctx, id, req)
}

// UpdateDatastore mocks base method.
func (m *MockService) UpdateDatastore(ctx context.Context, id string, req *client.UpdateDatastoreRequest) (*client.Datastore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatastore", ctx, id, req)
	ret0, _ := ret[0].(*client.Datastore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatastore indicates an expected call of UpdateDatastore.
func (mr *MockServiceMockRecorder) UpdateDatastore(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatastore", reflect.TypeOf((*MockService)(nil).UpdateDatastore), ctx, id, req)
}

// UpdateDeployment mocks base method.
func (m *MockService) UpdateDeployment(ctx context.Context, id string, req *client.UpdateDeploymentRequest) (*client.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeployment", ctx, id, req)
	ret0, _ := ret[0].(*client.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeployment indicates an expected call of UpdateDeployment.
func (mr *MockServiceMockRecorder) UpdateDeployment(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockService)(nil).UpdateDeployment), ctx, id, req)
}

// UpdateDeploymentChallengerReplaySettings mocks base method.
func (m *MockService) UpdateDeploymentChallengerReplaySettings(ctx context.Context, id string, req *client.DeploymentChallengerReplaySettings) (*client.DeploymentChallengerReplaySettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeploymentChallengerReplaySettings", ctx, id, req)
	ret0, _ := ret[0].(*client.DeploymentChallengerReplaySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeploymentChallengerReplaySettings indicates an expected call of UpdateDeploymentChallengerReplaySettings.
func (mr *MockServiceMockRecorder) UpdateDeploymentChallengerReplaySettings(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentChallengerReplaySettings", reflect.TypeOf((*MockService)(nil).UpdateDeploymentChallengerReplaySettings), ctx, id, req)
}

// UpdateDeploymentHealthSettings mocks base method.
func (m *MockService) UpdateDeploymentHealthSettings(ctx context.Context, id string, req *client.DeploymentHealthSettings) (*client.DeploymentHealthSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeploymentHealthSettings", ctx, id, req)
	ret0, _ := ret[0].(*client.DeploymentHealthSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeploymentHealthSettings indicates an expected call of UpdateDeploymentHealthSettings.
func (mr *MockServiceMockRecorder) UpdateDeploymentHealthSettings(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentHealthSettings", reflect.TypeOf((*MockService)(nil).UpdateDeploymentHealthSettings), ctx, id, req)
}

// UpdateDeploymentModel mocks base method.
func (m *MockService) UpdateDeploymentModel(ctx context.Context, id string, req *client.UpdateDeploymentModelRequest) (*client.Deployment, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeploymentModel", ctx, id, req)
	ret0, _ := ret[0].(*client.Deployment)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateDeploymentModel indicates an expected call of UpdateDeploymentModel.
func (mr *MockServiceMockRecorder) UpdateDeploymentModel(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentModel", reflect.TypeOf((*MockService)(nil).UpdateDeploymentModel), ctx, id, req)
}

// UpdateDeploymentSettings mocks base method.
func (m *MockService) UpdateDeploymentSettings(ctx context.Context, id string, req *client.DeploymentSettings) (*client.DeploymentSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeploymentSettings", ctx, id, req)
	ret0, _ := ret[0].(*client.DeploymentSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeploymentSettings indicates an expected call of UpdateDeploymentSettings.
func (mr *MockServiceMockRecorder) UpdateDeploymentSettings(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentSettings", reflect.TypeOf((*MockService)(nil).UpdateDeploymentSettings), ctx, id, req)
}

// UpdateLLMBlueprint mocks base method.
func (m *MockService) UpdateLLMBlueprint(ctx context.Context, id string, req *client.UpdateLLMBlueprintRequest) (*client.LLMBlueprint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLLMBlueprint", ctx, id, req)
	ret0, _ := ret[0].(*client.LLMBlueprint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLLMBlueprint indicates an expected call of UpdateLLMBlueprint.
func (mr *MockServiceMockRecorder) UpdateLLMBlueprint(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLLMBlueprint", reflect.TypeOf((*MockService)(nil).UpdateLLMBlueprint), ctx, id, req)
}

// UpdatePlayground mocks base method.
func (m *MockService) UpdatePlayground(ctx context.Context, id string, req *client.UpdatePlaygroundRequest) (*client.PlaygroundResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayground", ctx, id, req)
	ret0, _ := ret[0].(*client.PlaygroundResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlayground indicates an expected call of UpdatePlayground.
func (mr *MockServiceMockRecorder) UpdatePlayground(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayground", reflect.TypeOf((*MockService)(nil).UpdatePlayground), ctx, id, req)
}

// UpdatePredictionEnvironment mocks base method.
func (m *MockService) UpdatePredictionEnvironment(ctx context.Context, id string, req *client.PredictionEnvironmentRequest) (*client.PredictionEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePredictionEnvironment", ctx, id, req)
	ret0, _ := ret[0].(*client.PredictionEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePredictionEnvironment indicates an expected call of UpdatePredictionEnvironment.
func (mr *MockServiceMockRecorder) UpdatePredictionEnvironment(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePredictionEnvironment", reflect.TypeOf((*MockService)(nil).UpdatePredictionEnvironment), ctx, id, req)
}

// UpdateRegisteredModel mocks base method.
func (m *MockService) UpdateRegisteredModel(ctx context.Context, id string, req *client.UpdateRegisteredModelRequest) (*client.RegisteredModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegisteredModel", ctx, id, req)
	ret0, _ := ret[0].(*client.RegisteredModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegisteredModel indicates an expected call of UpdateRegisteredModel.
func (mr *MockServiceMockRecorder) UpdateRegisteredModel(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegisteredModel", reflect.TypeOf((*MockService)(nil).UpdateRegisteredModel), ctx, id, req)
}

// UpdateRegisteredModelVersion mocks base method.
func (m *MockService) UpdateRegisteredModelVersion(ctx context.Context, registeredModelId, versionId string, req *client.UpdateRegisteredModelVersionRequest) (*client.RegisteredModelVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegisteredModelVersion", ctx, registeredModelId, versionId, req)
	ret0, _ := ret[0].(*client.RegisteredModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegisteredModelVersion indicates an expected call of UpdateRegisteredModelVersion.
func (mr *MockServiceMockRecorder) UpdateRegisteredModelVersion(ctx, registeredModelId, versionId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegisteredModelVersion", reflect.TypeOf((*MockService)(nil).UpdateRegisteredModelVersion), ctx, registeredModelId, versionId, req)
}

// UpdateRemoteRepository mocks base method.
func (m *MockService) UpdateRemoteRepository(ctx context.Context, id string, req *client.UpdateRemoteRepositoryRequest) (*client.RemoteRepositoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemoteRepository", ctx, id, req)
	ret0, _ := ret[0].(*client.RemoteRepositoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRemoteRepository indicates an expected call of UpdateRemoteRepository.
func (mr *MockServiceMockRecorder) UpdateRemoteRepository(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteRepository", reflect.TypeOf((*MockService)(nil).UpdateRemoteRepository), ctx, id, req)
}

// UpdateUseCase mocks base method.
func (m *MockService) UpdateUseCase(ctx context.Context, id string, req *client.UseCaseRequest) (*client.UseCaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUseCase", ctx, id, req)
	ret0, _ := ret[0].(*client.UseCaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUseCase indicates an expected call of UpdateUseCase.
func (mr *MockServiceMockRecorder) UpdateUseCase(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUseCase", reflect.TypeOf((*MockService)(nil).UpdateUseCase), ctx, id, req)
}

// UpdateVectorDatabase mocks base method.
func (m *MockService) UpdateVectorDatabase(ctx context.Context, id string, req *client.UpdateVectorDatabaseRequest) (*client.VectorDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVectorDatabase", ctx, id, req)
	ret0, _ := ret[0].(*client.VectorDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVectorDatabase indicates an expected call of UpdateVectorDatabase.
func (mr *MockServiceMockRecorder) UpdateVectorDatabase(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVectorDatabase", reflect.TypeOf((*MockService)(nil).UpdateVectorDatabase), ctx, id, req)
}

// ValidateDeploymentModelReplacement mocks base method.
func (m *MockService) ValidateDeploymentModelReplacement(ctx context.Context, id string, req *client.ValidateDeployemntModelReplacementRequest) (*client.ValidateDeployemntModelReplacementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDeploymentModelReplacement", ctx, id, req)
	ret0, _ := ret[0].(*client.ValidateDeployemntModelReplacementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateDeploymentModelReplacement indicates an expected call of ValidateDeploymentModelReplacement.
func (mr *MockServiceMockRecorder) ValidateDeploymentModelReplacement(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDeploymentModelReplacement", reflect.TypeOf((*MockService)(nil).ValidateDeploymentModelReplacement), ctx, id, req)
}
